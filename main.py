import streamlit as st
from dotenv import load_dotenv
from langchain_experimental.agents import create_csv_agent
from langchain_groq import ChatGroq
import pandas as pd


def chat_with_csv(csv_file, user_query):
    """
    Processes the user's query using a conversational agent built on a large language model (LLM)
    that interacts with the uploaded CSV file.

    Args:
        csv_file: The CSV file uploaded by the user.
        user_query: The user's input query to process.

    Returns:
        A string containing the response generated by the LLM agent.
    """
    # Reset the file pointer to the start
    csv_file.seek(0)

    # Initialize the LLM with specific parameters
    llm = ChatGroq(model='llama3-70b-8192', temperature=0)

    # Create a CSV agent to handle the user's query with the uploaded CSV
    agent = create_csv_agent(llm, csv_file, verbose=True, allow_dangerous_code=True)

    # Run the user's query through the agent and return the response
    response = agent.run(user_query)
    return response

def main():
    """
    Main function to run the Streamlit app.
    This app allows users to upload a CSV file and interact with it using prompts.
    """
    # Load environment variables
    load_dotenv()

    # Set up the Streamlit page configuration
    st.set_page_config(page_title='Chat With CSV', page_icon='ðŸ“Š', layout='wide')
    st.title('Chat With CSVðŸ“Š')

    # Sidebar for CSV file upload
    upload_csv = st.sidebar.file_uploader('Upload Your CSV: ', type='csv')
    if upload_csv:
        # Read the uploaded CSV file into a DataFrame
        df = pd.read_csv(upload_csv)

        # Check if the uploaded CSV file is empty
        if df.empty:
            st.sidebar.error("The uploaded CSV file is empty. Please upload a valid file.")
            return

        # Display a preview of the uploaded CSV file in the sidebar
        st.sidebar.write("### Uploaded CSV Preview:")
        st.sidebar.dataframe(df)

        # Chat input for the user's prompt
        user_query = st.chat_input('Enter Your Prompt: ')
        if user_query:
            # Process the user's query with the uploaded CSV file
            response = chat_with_csv(csv_file=upload_csv, user_query=user_query)

            # Display the user's query in the chat interface
            with st.chat_message('user'):
                st.write(user_query)

            # Display the response from the LLM agent in the chat interface
            with st.chat_message('assistant'):
                st.write(response)

if __name__ == '__main__':
    main()
